While requests and datatypes are likely the biggest sources of leaks, 
apps may also leak lots of other MPI objects, like groups, 
communicators, windows, file handles, registered keys, etc.  Ultimately, 
I'd like a tool (or set of tools) that can be used to detect any of 
these leaks, although to start, requests would be the one I pick.  It 
seems like there should be a general design that works for all of these 
objects.

For example, I was thinking something like the following:

Maintain two AVL trees (or C++ STL maps)
    Stack Trace AVL Tree -- associates a stack trace (function calls only) with a count field
    Object AVL Tree -- associates an MPI handle id with a node in the Stack Trace AVL Tree

At allocation:
    Acquire current stack trace
    Lookup stack trace in Stack Trace AVL Tree
       If not found, create a new node for this stack trace, set count to 1, and insert into tree
       If found, increment count field, and record address of node
    Create a new node for the Object AVL Tree
    Record object handle id and address of stack trace node in the object node
    Insert object node into Object AVL Tree

At deallocation:
    Lookup node in Object AVL Tree using object handle id, record address of stack trace node
    Delete object node from Object AVL Tree
    Decrement count field on stack trace node
       If count == 0, delete node from Stack Trace AVL Tree

At dump time (finalize or PControl call)
    Iterate over all nodes in Stack Trace AVL Tree, and print count with stack trace
-Adam
